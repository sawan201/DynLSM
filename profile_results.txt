Timer unit: 1e-09 s

Total time: 8.31514 s
File: /Users/saada/Desktop/School/2025/DRUMS 2025/DynLSM/gibbs.py
Function: RunGibbs at line 36


    T = 4  # Number of time points
    n = 3   # Number of actors
    p = 1   # Latent space dimensions
    SigmaSq = 1.0  # Variance for the latent positions
    TauSq = 1.0  # Variance for the tau prior
    ThetaTau = 2.05  # Shape parameter for tau prior
    ThetaSigma = 9.0  # Shape parameter for sigma prior
    PhiSigma = 1.5  # Scale parameter for sigma prior
    NuIn = 0.0  # Input effect parameter for the model
    XiIn = 1.0  # Input effect parameter for the model
    NuOut = 0.0  # Output effect parameter for the model
    XiOut = 1.0  # Output effect parameter for the model
    EtaIn = 1.0  # Input effect parameter for the model
    EtaOut = 1.0  # Output effect parameter for the model
    BetaIn = 1.0  # Input effect parameter for the model
    BetaOut = 1.0  # Output effect parameter for the model
    RandomWalkVariance = 4.0  # Variance for the random walk 
    DirichletFactor = 100  # Factor for the Dirichlet prior 
    model_type = "binary"  # Type of model (e.g., "binary")
    InitType = "base"  # Initialization type for the model
    NumberOfSamples = 2000  # Total MCMC sweeps
    BurnIn = 500  # First draws to discard

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                               @line_profiler.profile
    37                                               def RunGibbs(self, ns, p, modelType, initType, nuIN, etaIN, nuOUT, etaOUT, thetaSigma, phiSigma, 
    38                                                            thetaTau, phiTau, alphas, randomWalkVariance = 9, dirichletFactor = 200):
    39                                                       '''
    40                                                       Inputs: 
    41                                                           ns (int number of steps)
    42                                                           p (int dimension of latent space)
    43                                                           modelType (either "poisson" or "binary")
    44                                                           initialization (either "base" or something else that we create later)
    45                                                           nuIN (mean of prior on betaIN)
    46                                                           etaIN (variance of prior on betaIN)
    47                                                           nuOUT (mean of prior on betaOUT)
    48                                                           etaOUT (variance of prior on betaOUT)
    49                                                           thetaSigma (shape parameter of prior on SigmaSq)
    50                                                           phiSigma (scale parameter of prior on SigmaSq)
    51                                                           thetaTau (shape parameter of prior on TauSq)
    52                                                           phiTau (scale parameter of prior on TauSq)
    53                                                           alphas (parameters for Dirichlet prior on r_{1:n})
    54                                                       
    55                                                       ** FOR NOW: 
    56                                                           ** Fix the variance of the normal random walk
    57                                                           ** Fix the Dirichlet factor (what value we will use in the proposal)
    58                                                       
    59                                                       Outputs:
    60                                                           X (ns x T x n x p Numpy array of latent positions samples from Markov Chain)
    61                                                           r (ns x n Numpy array of reach samples from Markov Chain)
    62                                                           tauSq (ns array of tauSq samples from Markov Chain)
    63                                                           sigmaSq (ns array of sigmaSq samples from Markov Chain)
    64                                                           betaIN (ns array of betaIN samples from Markov Chain)
    65                                                           betaOUT (ns array of betaOUT samples from Markov Chain)
    66                                                       '''
    67                                                       # Read in necessary parameters
    68         1       1000.0   1000.0      0.0              self.randomWalkVariance = randomWalkVariance
    69         1       1000.0   1000.0      0.0              self.dirichletFactor = dirichletFactor
    70                                           
    71                                                       # Assign the conditionals based on the input argument
    72         1       1000.0   1000.0      0.0              if modelType == "binary":
    73         2       6000.0   3000.0      0.0                  conditionals = cds.BinaryConditionals(nuIN, etaIN, nuOUT, etaOUT, thetaSigma, phiSigma, 
    74         1          0.0      0.0      0.0                                                      thetaTau, phiTau, alphas=alphas, p=p)
    75                                                       elif modelType == "poisson":
    76                                                           conditionals = cds.PoissonConditionals(nuIN, etaIN, nuOUT, etaOUT, thetaSigma, phiSigma, 
    77                                                                                               thetaTau, phiTau, alphas = alphas, p = p)
    78                                           
    79                                                       # Define key things:
    80         1          0.0      0.0      0.0              T = self.Y.shape[0]
    81         1          0.0      0.0      0.0              n = self.Y.shape[1]
    82         1          0.0      0.0      0.0              self.p = p
    83                                           
    84                                                       # Set up empty Numpy arrays
    85         1       1000.0   1000.0      0.0              positions = np.empty(shape=(ns, T, n, p))
    86         1          0.0      0.0      0.0              radii = np.empty(shape=(ns, n))
    87         1       1000.0   1000.0      0.0              betaIN = np.empty(shape=(ns))
    88         1          0.0      0.0      0.0              betaOUT = np.empty(shape=(ns))
    89         1          0.0      0.0      0.0              tauSq = np.empty(shape=(ns))
    90         1          0.0      0.0      0.0              sigmaSq = np.empty(shape=(ns))
    91                                           
    92                                                       # Assign the initialization based on the input argument
    93         1          0.0      0.0      0.0              if initType == "base":
    94         1       5000.0   5000.0      0.0                  initialization = init.BaseInitialization(self.Y, positions, radii, betaIN, betaOUT, tauSq, sigmaSq)
    95                                                       
    96                                                       # Set initial values for all
    97         1      29000.0  29000.0      0.0              positions, radii, betaIN, betaOUT, tauSq, sigmaSq = initialization.InitializeAll()
    98                                           
    99                                                       # Setup the currentData dictionary
   100         2          0.0      0.0      0.0              self.currentData = {"Y" : self.Y, 
   101         1       1000.0   1000.0      0.0                                  "X" : positions[0].copy(),
   102         1          0.0      0.0      0.0                                  "r" : radii[0].copy(),
   103         1          0.0      0.0      0.0                                  "betaIN" : betaIN[0],
   104         1          0.0      0.0      0.0                                  "betaOUT" : betaOUT[0],
   105         1          0.0      0.0      0.0                                  "tauSq" : tauSq[0],
   106         1          0.0      0.0      0.0                                  "sigmaSq" : sigmaSq[0]}            
   107                                           
   108                                                       # Begin Sampling
   109      2000     485000.0    242.5      0.0              for iter in range(1, ns):
   110                                           
   111                                                           # Sample latent positions
   112      9995    2184000.0    218.5      0.0                  for t in range(0, T):
   113      7996    1201000.0    150.2      0.0                      if t == 0:
   114      1999     502000.0    251.1      0.0                          logPosterior = conditionals.LogTime1ConditionalPosterior
   115      5997    1008000.0    168.1      0.0                      elif t == T - 1:
   116      1999     518000.0    259.1      0.0                          logPosterior = conditionals.LogTimeTConditionalPosterior
   117                                                               else:
   118      3998     946000.0    236.6      0.0                          logPosterior = conditionals.LogMiddleTimeConditionalPosterior
   119                                           
   120     31984    9292000.0    290.5      0.1                      for i in range(0, n):
   121     23988    4776000.0    199.1      0.1                          self.currentData["i"] = i
   122     23988    3656000.0    152.4      0.0                          self.currentData["t"] = t
   123     23988 6568274000.0 273815.0     79.0                          newPosition = self.MetropolisHastings(logPosterior, self.SampleFromIndMultivarNormal, positions[iter - 1, t, i], self.currentData)
   124     23988   10844000.0    452.1      0.1                          positions[iter, t, i] = newPosition
   125     23988    7875000.0    328.3      0.1                          self.currentData["X"][t, i] = newPosition
   126     23988  101205000.0   4219.0      1.2                          print("Iteration", iter, "Time", t, "Actor", i, "completed.")
   127                                                           
   128                                                           # Sample radii using Metropolis-Hastings
   129      3998  589543000.0 147459.5      7.1                  newRadii = self.MetropolisHastings(conditionals.LogRConditionalPosterior, self.SampleFromDirichlet, radii[iter - 1],
   130      1999     305000.0    152.6      0.0                                                     self.currentData, 
   131      1999     353000.0    176.6      0.0                                                     LogProposalEvaluate = self.LogEvaluateDirichlet, 
   132      1999     276000.0    138.1      0.0                                                     proposalSymmetric= False)
   133      1999    1115000.0    557.8      0.0                  radii[iter] = newRadii
   134      1999     448000.0    224.1      0.0                  self.currentData["r"] = newRadii
   135                                           
   136                                                           # Sample betaIN and betaOUT using Metropolis-Hastings
   137      3998  437107000.0 109331.4      5.3                  newBetaIN = self.MetropolisHastings(conditionals.LogBetaINConditionalPosterior, self.SampleFromNormalFixedVar,
   138      1999     459000.0    229.6      0.0                                              betaIN[iter - 1], self.currentData)
   139      1999     450000.0    225.1      0.0                  betaIN[iter] = newBetaIN
   140      1999     377000.0    188.6      0.0                  self.currentData["betaIN"] = newBetaIN
   141      3998  420653000.0 105215.9      5.1                  newBetaOUT = self.MetropolisHastings(conditionals.LogBetaOUTConditionalPosterior, self.SampleFromNormalFixedVar,
   142      1999     483000.0    241.6      0.0                                                  betaOUT[iter - 1], self.currentData)
   143      1999     438000.0    219.1      0.0                  betaOUT[iter] = newBetaOUT
   144      1999     311000.0    155.6      0.0                  self.currentData["betaOUT"] = newBetaOUT
   145                                           
   146                                                           # Sample tauSq and sigmaSq directly from conditional distribution
   147      1999   81781000.0  40911.0      1.0                  newTauSq = conditionals.SampleTauSquared(self.currentData["X"])
   148      1999     493000.0    246.6      0.0                  tauSq[iter] = newTauSq
   149      1999     352000.0    176.1      0.0                  self.currentData["tauSq"] = newTauSq
   150      1999   57852000.0  28940.5      0.7                  newSigmaSq = conditionals.SampleSigmaSquared(self.currentData["X"])
   151      1999     425000.0    212.6      0.0                  sigmaSq[iter] = newSigmaSq
   152      1999     324000.0    162.1      0.0                  self.currentData["sigmaSq"] = newSigmaSq
   153      1999    8779000.0   4391.7      0.1                  print("Iteration", iter, "completed.")
   154         1          0.0      0.0      0.0              return positions, radii, tauSq, sigmaSq, betaIN, betaOUT

Total time: 7.88722 s
File: /Users/saada/Desktop/School/2025/DRUMS 2025/DynLSM/gibbs.py
Function: MetropolisHastings at line 156

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   156                                               @line_profiler.profile
   157                                               def MetropolisHastings(self, ConditionalPosterior, ProposalSampler, currentValue, data, 
   158                                                                   LogProposalEvaluate = None, proposalSymmetric = True, logPosterior = True):
   159                                                   """
   160                                                   Inputs:
   161                                                   conditionalPosterior: one of the conditional posterior functions below
   162                                                   proposalSampler : one of the proposal sampler functions below
   163                                                   currentValue : the current value in the Markov chain of the parameter under study
   164                                                   data : dictionary of all values needed by the conditionalPosterior, proposalSampler
   165                                                   logProposalEvaluate : one of the "evaluate at" functions below (only needed for asymmetric proposal, default None)
   166                                                   proposalSymmetric : is the proposal symmetric? (False for Normal, True for Dirichlet)
   167                                                   logPosterior : are we passing in log functions everywhere? (defaults to True)
   168                                           
   169                                                   Output:
   170                                                       next value in the Markov chain (either proposalValue or currentValue)
   171                                                   """
   172     29985 1142012000.0  38086.1     14.5          proposalValue = ProposalSampler(currentValue)
   173     29985 3349992000.0 111722.3     42.5          posteriorAtProposal = ConditionalPosterior(data, proposalValue)
   174     29985 3196572000.0 106605.7     40.5          posteriorAtCurrent = ConditionalPosterior(data, currentValue)
   175                                           
   176                                                   # If the proposal distribution is symmetric, we do not need to have a correction factor in the ratio
   177     29985    5506000.0    183.6      0.1          if proposalSymmetric == True:
   178     27986    3237000.0    115.7      0.0              if logPosterior == True:
   179     27986    3889000.0    139.0      0.0                  logAcceptanceRatio = posteriorAtProposal - posteriorAtCurrent
   180     27986   21840000.0    780.4      0.3                  acceptanceRatio = min(1, np.exp(logAcceptanceRatio))
   181                                                       else:
   182                                                           acceptanceRatio = min(1, posteriorAtProposal / posteriorAtCurrent)
   183                                                   
   184                                                   # If the proposal distribution is not symmetric, we need a correction factor
   185                                                   else:
   186                                                       # Evaluate proposal distribution each way
   187      1999   73514000.0  36775.4      0.9              logProposalValueGivenCurrent = LogProposalEvaluate(currentValue, proposalValue)
   188      1999   57656000.0  28842.4      0.7              logCurrentValueGivenProposal = LogProposalEvaluate(proposalValue, currentValue)
   189                                           
   190      1999     353000.0    176.6      0.0              if logPosterior == True:
   191      1999     546000.0    273.1      0.0                  logAcceptanceRatio = (posteriorAtProposal + logCurrentValueGivenProposal) - (posteriorAtCurrent + logProposalValueGivenCurrent)
   192      1999    1734000.0    867.4      0.0                  acceptanceRatio = min(1, np.exp(logAcceptanceRatio))
   193                                                       
   194                                                       else:
   195                                                           proposalValueGivenCurrent = np.exp(logProposalValueGivenCurrent)
   196                                                           currentValueGivenProposal = np.exp(logCurrentValueGivenProposal)
   197                                           
   198                                                           acceptanceRatio = min(1, (posteriorAtProposal * currentValueGivenProposal) / (posteriorAtCurrent * proposalValueGivenCurrent))
   199                                                   
   200                                                   # We have an acceptanceRatio. Now, we need to decide whether to accept or reject.
   201     29985    5171000.0    172.5      0.1          if acceptanceRatio == 1:
   202      9460    1446000.0    152.9      0.0              return proposalValue
   203                                                   else:
   204                                                       # Choose a random number between [0, 1]
   205     20525   13098000.0    638.1      0.2              randomValue = np.random.rand()
   206     20525    3180000.0    154.9      0.0              if randomValue < acceptanceRatio:
   207      9484    5794000.0    610.9      0.1                  return proposalValue
   208                                                       else:
   209     11041    1679000.0    152.1      0.0                  return currentValue

